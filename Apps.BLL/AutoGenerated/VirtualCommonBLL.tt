<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#><#@ 
 output extension=".cs"#>
<#@ include file="../../Apps.Models/Common.ttinclude"#>
 <#
	const string usingName = "Sys";
const string inputFile = @"../../Apps.Models/DB.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this); 
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	if (entity.Name.StartsWith(usingName))
    {
    fileManager.StartNewFile("Virtual_"+entity.Name + "BLL.cs");
	var simpleProperties = typeMapper.GetSimpleProperties(entity);
#>
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Apps.Models;
using Apps.Models.Sys;
using Apps.IBLL;
using Apps.IDAL;
using Microsoft.Practices.Unity;
using Apps.Common;
using Apps.BLL.Core;

namespace Apps.BLL
{
	public class Virtual_<#=entity.Name#>BLL 
	{
		[Dependency]
        public I<#=entity.Name#>Repository m_Rep { get; set; }

		public DBContainer db = new DBContainer();
        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="pager">JQgrid分页</param>
        /// <param name="queryStr">搜索条件</param>
        /// <returns>列表</returns>
        public virtual List<<#=entity.Name#>Model> GetList(ref GridPager pager,string queryStr)
        {

            IQueryable<<#=entity.Name#>> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
				<# 
				int i = 0;
				if (simpleProperties.Any()){foreach(var edmProperty in simpleProperties){
					if (i == 0)
					{
						#>
						<#= codeStringGenerator.Property(edmProperty).ToString().IndexOf("string")>0?"a => (a."+edmProperty+" != null && a."+edmProperty+".Contains(queryStr))":""#>
						<#
						if(codeStringGenerator.Property(edmProperty).ToString().IndexOf("string")>0)
						{
							i=1;
						}
					}
					else if(i==1)
					{#>
						<#=codeStringGenerator.Property(edmProperty).ToString().IndexOf("string")>0?"|| (a."+edmProperty+" != null && a."+edmProperty+".Contains(queryStr))":""#>
					<#
					}
                
				#>
			<#
			}}#>);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            List<<#=entity.Name#>Model> modelList = (from r in queryData
                                              select new <#=entity.Name#>Model
                                              {
                                                 <#
												 if (simpleProperties.Any())
                                                 {
													foreach(var edmProperty in simpleProperties)
                                                    {#>
													 <#=edmProperty#> = r.<#=edmProperty#>,
                                                  <#}
                                                 }
												#>

                                              }).ToList();
            return modelList;
        }
        /// <summary>
        /// 创建一个实体
        /// </summary>
        /// <param name="errors">持久的错误信息</param>
        /// <param name="model">模型</param>
        /// <returns>是否成功</returns>
        public virtual bool Create(ref ValidationErrors errors, <#=entity.Name#>Model model)
        {
            try
            {
                <#=entity.Name#> entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.add(Suggestion.PrimaryRepeat);
                    return false;
                }
                entity = new <#=entity.Name#>();
                <#
				if(simpleProperties.Any())
                {
					foreach(var edmProperty in simpleProperties)
                    {
					#>
					entity.<#=edmProperty#> = model.<#=edmProperty#>;
                    <#}
                }
				#>

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.add("插入失败");
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.add(ex.Message);
                ExceptionHandler.WriteException(ex);
                //ExceptionHander.WriteException(ex);
                return false;
            }
        }
        /// <summary>
        /// 删除一个实体
        /// </summary>
        /// <param name="errors">持久的错误信息</param>
        /// <param name="id">id</param>
        /// <returns>是否成功</returns>
        public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    errors.add(Suggestion.DeleteFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.add(ex.Message);
                ExceptionHandler.WriteException(ex);
                return false;
            }
        }

        /// <summary>
        /// 修改一个实体
        /// </summary>
        /// <param name="errors">持久的错误信息</param>
        /// <param name="model">模型</param>
        /// <returns>是否成功</returns>
        public virtual bool Edit(ref ValidationErrors errors, <#=entity.Name#>Model model)
        {
            try
            {
                <#=entity.Name#> entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.add(Suggestion.Disable);
                    return false;
                }
                <#
				if(simpleProperties.Any())
                {
					foreach(var edmProperty in simpleProperties)
                    {
					#>
					entity.<#=edmProperty#> = model.<#=edmProperty#>;
                    <#}
                }
				#>



                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.add(Suggestion.EditFail);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.add(ex.Message);
                ExceptionHandler.WriteException(ex);
                //ExceptionHander.WriteException(ex);
                return false;
            }
        }
        /// <summary>
        /// 判断是否存在实体
        /// </summary>
        /// <param name="id">主键ID</param>
        /// <returns>是否存在</returns>
        public virtual bool IsExist(string id)
        {
            return m_Rep.IsExist(id);
        }
        /// <summary>
        /// 根据ID获得一个实体
        /// </summary>
        /// <param name="id">id</param>
        /// <returns>实体</returns>
        public virtual <#=entity.Name#>Model GetById(string id)
        {
            if (IsExist(id))
            {
                <#=entity.Name#> entity = m_Rep.GetById(id);
                <#=entity.Name#>Model model = new <#=entity.Name#>Model();
                <#if(simpleProperties.Any())
                {
					foreach(var edmProperty in simpleProperties)
                    {#>
					 model.<#=edmProperty#> = entity.<#=edmProperty#>;
                    <#}
                }
				#>

                return model;
            }
            else
            {
                return null;
            }
        }
	}
<#
	EndNamespace(code);
    }
}

fileManager.Process();
#>



