<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../../Apps.Flow.Models/Common.ttinclude"#><#@ 
 output extension=".cs"#><#

const string inputFile = @"../../Apps.Flow.Models/Flow.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    fileManager.StartNewFile(entity.Name + "Repository.cs");
    
#>
using System;
using Apps.Flow.IDAL;
using Apps.Flow.Models;

namespace Apps.Flow.DAL
{
	public partial class <#=entity.Name#>Repository : CommonRepository<<#=entity.Name#>>,I<#=entity.Name#>Repository
	{
		public <#=entity.Name#>Repository(FlowContainer db) : base(db)
		{
		}
	}
<#
	EndNamespace(code); 
}
fileManager.Process();
#>

