//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Apps.Models;
using Apps.Models.Sys;
using Apps.MIS.IBLL;
using Apps.MIS.IDAL;
using Microsoft.Practices.Unity;
using Apps.Common;
using Apps.BLL.Core;

namespace Apps.MIS.BLL
{
	public class Virtual_MIS_ProfessorOuterBLL 
	{
		[Dependency]
        public IMIS_ProfessorOuterRepository m_Rep { get; set; }

		public DBContainer db = new DBContainer();
        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="pager">JQgrid分页</param>
        /// <param name="queryStr">搜索条件</param>
        /// <returns>列表</returns>
        public virtual List<MIS_ProfessorOuterModel> GetList(ref GridPager pager,string queryStr)
        {

            IQueryable<MIS_ProfessorOuter> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
										
															a => (a.uid!=null&&a.uid.Contains(queryStr))
															||  (a.name!=null&&a.name.Contains(queryStr))
														||  (a.sex!=null&&a.sex.Contains(queryStr))
														||  (a.position!=null&&a.position.Contains(queryStr))
														||  (a.department!=null&&a.department.Contains(queryStr))
														||  (a.mobile!=null&&a.mobile.Contains(queryStr))
														||  (a.email!=null&&a.email.Contains(queryStr))
														||  (a.area!=null&&a.area.Contains(queryStr))
														||  (a.profession!=null&&a.profession.Contains(queryStr))
														||  (a.office!=null&&a.office.Contains(queryStr))
														||  (a.stuNumPG!=null&&a.stuNumPG.Contains(queryStr))
														||  (a.referee!=null&&a.referee.Contains(queryStr))
														||  (a.location!=null&&a.location.Contains(queryStr))
														||  (a.Account!=null&&a.Account.Contains(queryStr))
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            List<MIS_ProfessorOuterModel> modelList = (from r in queryData
                                              select new MIS_ProfessorOuterModel
                                              {
                                                 													 Id = r.Id,
                                                  													 uid = r.uid,
                                                  													 name = r.name,
                                                  													 sex = r.sex,
                                                  													 position = r.position,
                                                  													 department = r.department,
                                                  													 mobile = r.mobile,
                                                  													 email = r.email,
                                                  													 area = r.area,
                                                  													 profession = r.profession,
                                                  													 office = r.office,
                                                  													 stuNumPG = r.stuNumPG,
                                                  													 referee = r.referee,
                                                  													 location = r.location,
                                                  													 Account = r.Account,
                                                  
                                              }).ToList();
            return modelList;
        }
        /// <summary>
        /// 创建一个实体
        /// </summary>
        /// <param name="errors">持久的错误信息</param>
        /// <param name="model">模型</param>
        /// <returns>是否成功</returns>
        public virtual bool Create(ref ValidationErrors errors, MIS_ProfessorOuterModel model)
        {
            try
            {
                MIS_ProfessorOuter entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.add(Suggestion.PrimaryRepeat);
                    return false;
                }
                entity = new MIS_ProfessorOuter();
                					entity.Id = model.Id;
                    					entity.uid = model.uid;
                    					entity.name = model.name;
                    					entity.sex = model.sex;
                    					entity.position = model.position;
                    					entity.department = model.department;
                    					entity.mobile = model.mobile;
                    					entity.email = model.email;
                    					entity.area = model.area;
                    					entity.profession = model.profession;
                    					entity.office = model.office;
                    					entity.stuNumPG = model.stuNumPG;
                    					entity.referee = model.referee;
                    					entity.location = model.location;
                    					entity.Account = model.Account;
                    
                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.add("插入失败");
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.add(ex.Message);
                ExceptionHandler.WriteException(ex);
                //ExceptionHander.WriteException(ex);
                return false;
            }
        }
        /// <summary>
        /// 删除一个实体
        /// </summary>
        /// <param name="errors">持久的错误信息</param>
        /// <param name="id">id</param>
        /// <returns>是否成功</returns>
        public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    errors.add(Suggestion.DeleteFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.add(ex.Message);
                ExceptionHandler.WriteException(ex);
                return false;
            }
        }

        /// <summary>
        /// 修改一个实体
        /// </summary>
        /// <param name="errors">持久的错误信息</param>
        /// <param name="model">模型</param>
        /// <returns>是否成功</returns>
        public virtual bool Edit(ref ValidationErrors errors, MIS_ProfessorOuterModel model)
        {
            try
            {
                MIS_ProfessorOuter entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.add(Suggestion.Disable);
                    return false;
                }
                					entity.Id = model.Id;
                    					entity.uid = model.uid;
                    					entity.name = model.name;
                    					entity.sex = model.sex;
                    					entity.position = model.position;
                    					entity.department = model.department;
                    					entity.mobile = model.mobile;
                    					entity.email = model.email;
                    					entity.area = model.area;
                    					entity.profession = model.profession;
                    					entity.office = model.office;
                    					entity.stuNumPG = model.stuNumPG;
                    					entity.referee = model.referee;
                    					entity.location = model.location;
                    					entity.Account = model.Account;
                    


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.add(Suggestion.EditFail);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.add(ex.Message);
                ExceptionHandler.WriteException(ex);
                //ExceptionHander.WriteException(ex);
                return false;
            }
        }
        /// <summary>
        /// 判断是否存在实体
        /// </summary>
        /// <param name="id">主键ID</param>
        /// <returns>是否存在</returns>
        public virtual bool IsExist(string id)
        {
            return m_Rep.IsExist(id);
        }
        /// <summary>
        /// 根据ID获得一个实体
        /// </summary>
        /// <param name="id">id</param>
        /// <returns>实体</returns>
        public virtual MIS_ProfessorOuterModel GetById(string id)
        {
            if (IsExist(id))
            {
                MIS_ProfessorOuter entity = m_Rep.GetById(id);
                MIS_ProfessorOuterModel model = new MIS_ProfessorOuterModel();
                					 model.Id = entity.Id;
                    					 model.uid = entity.uid;
                    					 model.name = entity.name;
                    					 model.sex = entity.sex;
                    					 model.position = entity.position;
                    					 model.department = entity.department;
                    					 model.mobile = entity.mobile;
                    					 model.email = entity.email;
                    					 model.area = entity.area;
                    					 model.profession = entity.profession;
                    					 model.office = entity.office;
                    					 model.stuNumPG = entity.stuNumPG;
                    					 model.referee = entity.referee;
                    					 model.location = entity.location;
                    					 model.Account = entity.Account;
                    
                return model;
            }
            else
            {
                return null;
            }
        }
	}
}
