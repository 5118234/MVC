<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#><#@ 
 output extension=".cs"#>
 <#@ include file="../../Apps.Models/Common.ttinclude" #>
 <#

const string inputFile = @"../../Apps.Models/DB.edmx";
var textTransform = DynamicTextTransformation.Create(this); 
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);  
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    fileManager.StartNewFile("Virtual_"+entity.Name + "Model.cs");
    var simpleProperties = typeMapper.GetSimpleProperties(entity);
#>

using System;
using System.ComponentModel.DataAnnotations;

namespace Apps.Models.Sys
{
	public class Virtual_<#=entity.Name#>Model
	{
		<#foreach(var edmProperty in simpleProperties){#>public virtual <#=typeMapper.GetTypeName(edmProperty.TypeUsage)#> <#=edmProperty#> { get; set; }
		<#}#>
	
	}

<#
	EndNamespace(code);
}
fileManager.Process();
#>
